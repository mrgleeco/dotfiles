"
" if editing this file, reload with  :so %
" to update bundles, do from cmd line:
"   vim +BundleInstall +qall


" use :Gist -P      ...for public if private is default
" let g:gist_post_private = 1
" for use with enterprise
" let g:gist_api_url = 'http://your-github-enterprise-domain/api/v3'
" let g:gist_show_privates = 1
" store a token in ~/.gist-vim
" ensure github user exists in .gitconfig
" git config --global github.user gleeco
let g:gist_post_private = 1


" use pg_format via brew install pgFormatter
au FileType sql setl formatprg=/usr/local/bin/pg_format\ -

if match($TERM, "screen")!=-1
  set term=xterm
endif

set ttymouse=xterm2
set mouse=a
set t_Co=256 "tell the term has 256 colors


" to see all mappings :map
" to see all scripts loaded,  :scriptnames
" to cleanup: 
" :BundleClean  :BundleUpdate
source $HOME/.vim/bundles.vim

syntax on
"syntax enable
set vb                          " visual bell
set number
set ruler
set wrap                        " set nowrap
set encoding=utf-8
set scrolloff=3                 " show context above and below the line
set wildmenu                    " show menu for tab completion

set clipboard=unnamed           " yank + paste w/ system clipboard"


set background=dark
"colorscheme solarized
"let g:solarized_termcolors=256
colorscheme jellybeans

" highlight Visual term=reverse gui=reverse

let g:airline_powerline_fonts=1

" Don't redraw while executing macros (good performance config)
set lazyredraw


nnoremap <leader>rd :redraw!<cr>

" For regular expressions turn magic on
" set magic

" Whitespace 
set tabstop=4 " Display <Tab>s as 4-spaces.
set shiftwidth=4 " Shift operations should use the same amount.
set softtabstop=4 " Use a mixture of spaces and <Tab>s to complete editing operations
set list listchars=tab:▸\ ,eol:¬,trail:•


" allow toggling; test function exists b/c auto reload of this file is ON
" default at startup is tabs off (spaces)
set expandtab
if !exists("*TabToggle")
    function TabToggle()
        if &expandtab
            set noexpandtab
            echo 'tabs ON'
        else
            set expandtab
            echo 'tabs OFF'
        endif
        endfunction
endif
nmap <F9> mz:execute TabToggle()<CR>'z
" TODO - function for :retab in visual mode

" Spelling options -- this highlights waaay too much
set spelllang=en_us
nn <F5> :setlocal spell! spell?<CR>

" shill to test functions
map <F2> :echo 'Current time is ' . strftime('%c')<CR>)

" Searching
" highlight clear Search
" set incsearch                   " Makes search act like search in modern browsers
set hlsearch                    " Highlight search results
set gdefault                    " automatically set "/g" at the end of :substution commands
set ignorecase                  " Ignore case when searching
set smartcase                   " When searching try to be smart about cases 
nnoremap / /\v
vnoremap / /\v

" Auto formatting
set autoindent " automatically indent text
set formatoptions+=n1 " add formatting numbered list to autoformat

" Moving around windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"Misc
set ttyfast " using a fast terminal
nnoremap ; :
" inoremap jj <ESC>


" to use jsbeautify (works only on *.js files)
" <leader>ff
" where <leader> is a backslash


" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,*.swp,.svn,vendor/gems/*


" see below
" set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l
set laststatus=2                    " Always show the status line


" Remember last location in file
" if has("autocmd")
"  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
"    \| exe "normal g'\"" | endif
"endif

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" highlight reverse

" remap <F1> to turning off search highlighting (default: help)
map <F1> :nohl<CR>
imap <F1> <ESC>:nohl<CR> i

" Use modeline overrides
set modeline
set modelines=10

" set the number of undos
" undolevels 99
set ul=99

" Directories for swp files
" set backupdir=$HOME/.vim/backup
" set directory=$HOME/.vim/backup

if version >= 703
  set undofile
  set undodir=$HOME/.vim/undo
endif

" Reformat the current paragraph according to current 'textwidth' with ^]
nmap <C-]> gqap
vmap <C-]> gq
imap <C-]> <C-O>gqap

" Tabs
map <Leader>tp :tabp<CR>
map <Leader>tn :tabnext<CR>

" Show (partial) command in the status line
set showcmd

" Tagbar Configuration
nmap <Leader>tb :TagbarToggle<CR>
" Auto-focus on open, close on selection
let g:tagbar_autoclose = 1


"
" pathogen autoloading
" 
call pathogen#infect()


" autocmd vimenter * NERDTree           " add Nerdtree at startup
" nerdtree with ctrl-n
map <C-n> :NERDTreeToggle<CR>
map :nt :NERDTreeToggle<CR>

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
" usage:   :Ag foo          -- searches cwd by default
" usage:   :Ag foo ~/htdocs -- search somewhere else
" works in visual mode too
if executable('ag')
  let g:ackprg = 'ag --nogroup --column'

  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif



" prevent accidental :Q going in to EX mode
map Q :q

set tabpagemax=10


" jsbeautify
map :pretty :call JsBeautify()<CR>
map <F3> :call JsBeautify()<CR>

"""""" PERL """"""""""

" check perl code with :make
autocmd FileType perl set makeprg=perl\ -c\ %\ $*

" 
" perl module scaffold
autocmd BufNewFile  *.pm        0r ~/.vim/skeleton.pm

" let g:Perl_BraceOnNewLine     = "yes"

"  don't like/understand these!? 
" let perl_fold           = 1
" let perl_fold_blocks    = 1
" support @{${"foo"}}
:let perl_extended_vars = 1

:filetype plugin on
let g:Perl_AuthorName      = 'Greg Lee Coleman'
let g:Perl_AuthorRef       = 'gleeco'
let g:Perl_Email           = 'gleeco@gmail.com'
let g:Perl_Company         = ''
let g:Perl_BraceOnNewLine   = "yes"

" fix so that mouse-button (middle) paste during insert just works
" ie. paste with a comment will still keep indenting by default;
" but hitting <F7> before the paste will do the right thing. 
"
set nopaste
nmap <F7> :set paste! paste?<CR>
imap <F7> <C-o>:set paste!<CR>
vmap <F7> <Esc>:set paste!<CR>gv
nnoremap <MiddleMouse> i<MiddleMouse>
vnoremap <MiddleMouse> s<MiddleMouse>
set pastetoggle=<F7> mouse=rnv

" this is an inotify-like reloader for .vimrc
augroup myvimrc
    au!
    au BufWritePost .vimrc, so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END




" set col > 80 as grey bg
augroup vimrc_autocmds
  autocmd BufEnter * highlight OverLength ctermbg=darkgrey guibg=#111111
  autocmd BufEnter * match OverLength /\%80v.*/
augroup END
